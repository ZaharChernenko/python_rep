# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'prototype.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from ui_objects import (
    DragAndDropFrame,
    DragAndDropFrameLabelsText,
    DragAndDropFrameStyles,
    DragAndDropFrameTitles,
    ExtensionValidator,
    ValidExtensions,
)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 346)
        MainWindow.setStyleSheet(
            "#centralwidget {\n"
            "    background-color: #1f232a;\n"
            "}\n"
            "#generate_btn {\n"
            "    background-color: rgba(255, 255, 255, 0.7);\n"
            "    border-radius: 10px;\n"
            "}"
        )
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.word_field = DragAndDropFrame(
            widget=self.centralwidget,
            title=DragAndDropFrameTitles.WORD,
            style=DragAndDropFrameStyles.WORD,
            label_text=DragAndDropFrameLabelsText.WORD,
            extension_validator=ExtensionValidator(ValidExtensions.WORD),
            onFileDropped=self.handleDropEvent,
        )
        self.verticalLayout.addWidget(self.word_field)

        self.excel_field = DragAndDropFrame(
            widget=self.centralwidget,
            title=DragAndDropFrameTitles.EXCEL,
            style=DragAndDropFrameStyles.EXCEL,
            label_text=DragAndDropFrameLabelsText.EXCEL,
            extension_validator=ExtensionValidator(ValidExtensions.EXCEL),
            onFileDropped=self.handleDropEvent,
        )
        self.verticalLayout.addWidget(self.excel_field)

        self.json_field = DragAndDropFrame(
            widget=self.centralwidget,
            title=DragAndDropFrameTitles.JSON,
            style=DragAndDropFrameStyles.JSON,
            label_text=DragAndDropFrameLabelsText.JSON,
            extension_validator=ExtensionValidator(ValidExtensions.JSON),
            onFileDropped=self.handleDropEvent,
        )
        self.verticalLayout.addWidget(self.json_field)

        self.progress_bar = QtWidgets.QProgressBar(self.centralwidget)
        self.progress_bar.setProperty("value", 24)
        self.progress_bar.setObjectName("progress_bar")
        self.verticalLayout.addWidget(self.progress_bar)
        self.generate_btn = QtWidgets.QPushButton(self.centralwidget)
        self.generate_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.generate_btn.setObjectName("generate_btn")
        self.verticalLayout.addWidget(self.generate_btn)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def handleDropEvent(self):
        if self.checkAllFilesDropped():
            self.generate_btn.setEnabled(True)  # Активируем кнопку
            self.generate_btn.setStyleSheet("background-color: lightgreen;")
        else:
            self.generate_btn.setEnabled(False)  # Отключаем кнопку
            self.generate_btn.setStyleSheet("background-color: lightgray;")

    def checkAllFilesDropped(self) -> bool:
        return self.word_field and self.excel_field and self.json_field

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Генератор сертификатов"))
        self.generate_btn.setText(_translate("MainWindow", "Сгенерировать сертификаты"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
